c
quit
Display.new(@board).render
s
Display.new(@board).render
s
display col
display row
display moves
c
display self
self
quit
diagonal_moves
possible_moves
s
self
quit
self
quit
exit
test_board[[4,7]].down_left_diagonal_pos
load 'sliding_piece_module.rb'
load 'sliding_piece_modle.rb'
test_board[[4,7]].down_left_diagonal_pos
test_board.in_check?(:white)
test_board.move_piece([6,5],[7,4])
test_board.in_check?(:white)
test_board[[6,5]].move_into_check?([6,5])
test_board[[6,5]].move_into_check?([5,6])
test_board[[6,5]].move_into_check?([7,4])
test_board[[6,5]].move_into_check?([5,6])
test_board.in_check?(self.color)
Display.new(test_board).render
test_board.move_piece([7,4],[6,5])
test_board[[4,7]].move_dirs
test_board.in_check?(self.color)
Display.new(test_board).render
Dsiplay.new(test_board).render
test_board
exit
test_board[[4,7]].move_dirs
test_board[[4,7]].make_dirs
test_board[[7,4]]
test_board[[7,4]].class
test_board[[5,5]].class
test_board[[5,5]]
test_board[[6,5]].class
test_board[[6,5]]
Display.new(test_board).render
test_board[[4,7]]
c
exit
c
test_board[[6,5]]
test_board[[4,7]]
exit
test_board[[5,4]]
test_board[[6,4]]
test_board[[7,4]]
Display.new(test_board).render
c
n
moves
n
s
ss
s
n
s
n
s
display enemy
display enemy.move_dirs
king_color
king_pos
enemy
s
a[[4,7]].move_dirs
enemies
c
test_board.in_check?(:white)
Display.new(test_board).render
c
self
slef
c
self
c
self
c
self
c
s
possible_moves
s
quit
c
s
@board[[x_shift, y_shift]]
exit
@board[[row,col]]
@board[[row,row]]
@board[row][col]
@board
c
exit
enemies
n
s
ss
s
moves
s
enemies
s
king_pos
s
king_pos
king_color
s
n
s
end_pos
self[end_pos].pos
self[end_pos]
s
self[end_pos]
self[start_pos]
c
result[[row ,col]]
s
result.grid
result
c
test_board
test_board.class
test_board
quit
self.board.class
self.board
a[[5,5]].board
test_board.class
test_board
end_pos
c
king.first
grid.flatten.select {|piece| piece.class == King && piece.color == color}.class
king.class
grid.flatten.select {|piece| piece.class == King && piece.color == color}
king
king.color
king
c
n
s
king
s
n
s
king
n
s
color
c
quit
self[end_pos].pos
self[end_pos]
end_pos
quit
self[end_pos]
c
quit
s
@board[row][col]
@board[row]
@board
s
col
row
s
start_pos
quit
self[end_pos]
self[end_pos].is_a?(Piece)
s
end_pos
start_pos
